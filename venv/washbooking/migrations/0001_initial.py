# Generated by Django 4.1.7 on 2023-06-27 21:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import washbooking.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=100, unique=True)),
                ("native_lang", models.CharField(blank=True, max_length=100)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_association", models.BooleanField(default=False)),
                ("confirmation_code", models.IntegerField(unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Association",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="", max_length=200)),
                ("adress", models.CharField(max_length=200)),
                ("region", models.CharField(default="", max_length=200)),
                (
                    "join_key",
                    models.CharField(
                        max_length=6,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator("^\\d{1,10}$")
                        ],
                    ),
                ),
                ("coordinateX", models.FloatField(max_length=200)),
                ("coordinateY", models.FloatField(max_length=200)),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to=washbooking.models.upload_to
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BookableObject",
            fields=[
                ("objectId", models.AutoField(primary_key=True, serialize=False)),
                ("objectName", models.CharField(max_length=200)),
                ("timeSlotLength", models.IntegerField()),
                ("timeSlotStartTime", models.TimeField()),
                ("timeSlotEndTime", models.TimeField()),
                ("slotsPerDay", models.IntegerField(default=1)),
                ("slotsPerWeek", models.IntegerField(default=2)),
                ("bookAheadWeeks", models.IntegerField(default=4)),
                (
                    "inAssociation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="washbooking.association",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200)),
                ("date", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("associations", models.ManyToManyField(to="washbooking.association")),
            ],
        ),
        migrations.CreateModel(
            name="Key",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        default=washbooking.models.randomHex,
                        editable=False,
                        max_length=10,
                    ),
                ),
                ("used", models.BooleanField()),
                (
                    "associationKey",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="washbooking.association",
                    ),
                ),
            ],
            options={
                "unique_together": {("key", "associationKey")},
            },
        ),
        migrations.CreateModel(
            name="BookedTime",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(help_text="YYYY-MM-DD")),
                ("start_time", models.TimeField(help_text="HH:MM:SS")),
                ("end_time", models.TimeField(help_text="HH:MM:SS")),
                (
                    "booking_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="washbooking.bookableobject",
                    ),
                ),
                (
                    "booked_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="washbooking.person",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("date", "start_time", "end_time", "booking_object")
                },
            },
        ),
    ]
